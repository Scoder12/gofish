// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Cmsg, unionToCmsg, unionListToCmsg } from '../go-fish/cmsg.js';


export class CmsgTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CmsgTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCmsgTable(bb:flatbuffers.ByteBuffer, obj?:CmsgTable):CmsgTable {
  return (obj || new CmsgTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCmsgTable(bb:flatbuffers.ByteBuffer, obj?:CmsgTable):CmsgTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CmsgTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

msgType():Cmsg {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Cmsg.NONE;
}

msg<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCmsgTable(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMsgType(builder:flatbuffers.Builder, msgType:Cmsg) {
  builder.addFieldInt8(0, msgType, Cmsg.NONE);
}

static addMsg(builder:flatbuffers.Builder, msgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, msgOffset, 0);
}

static endCmsgTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCmsgTable(builder:flatbuffers.Builder, msgType:Cmsg, msgOffset:flatbuffers.Offset):flatbuffers.Offset {
  CmsgTable.startCmsgTable(builder);
  CmsgTable.addMsgType(builder, msgType);
  CmsgTable.addMsg(builder, msgOffset);
  return CmsgTable.endCmsgTable(builder);
}
}
