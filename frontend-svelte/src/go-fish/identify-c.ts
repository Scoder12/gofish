// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { GameRef, unionToGameRef, unionListToGameRef } from '../go-fish/game-ref.js';


export class IdentifyC {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IdentifyC {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIdentifyC(bb:flatbuffers.ByteBuffer, obj?:IdentifyC):IdentifyC {
  return (obj || new IdentifyC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIdentifyC(bb:flatbuffers.ByteBuffer, obj?:IdentifyC):IdentifyC {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IdentifyC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gameType():GameRef {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : GameRef.NONE;
}

game<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startIdentifyC(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addGameType(builder:flatbuffers.Builder, gameType:GameRef) {
  builder.addFieldInt8(1, gameType, GameRef.NONE);
}

static addGame(builder:flatbuffers.Builder, gameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, gameOffset, 0);
}

static endIdentifyC(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // name
  builder.requiredField(offset, 8) // game
  return offset;
}

static createIdentifyC(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, gameType:GameRef, gameOffset:flatbuffers.Offset):flatbuffers.Offset {
  IdentifyC.startIdentifyC(builder);
  IdentifyC.addName(builder, nameOffset);
  IdentifyC.addGameType(builder, gameType);
  IdentifyC.addGame(builder, gameOffset);
  return IdentifyC.endIdentifyC(builder);
}
}
