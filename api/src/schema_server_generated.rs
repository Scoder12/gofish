// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod go_fish {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SMSG: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SMSG: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SMSG: [SMsg; 3] = [
  SMsg::NONE,
  SMsg::ErrorS,
  SMsg::GameCreationResponseS,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SMsg(pub u8);
#[allow(non_upper_case_globals)]
impl SMsg {
  pub const NONE: Self = Self(0);
  pub const ErrorS: Self = Self(1);
  pub const GameCreationResponseS: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::ErrorS,
    Self::GameCreationResponseS,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::ErrorS => Some("ErrorS"),
      Self::GameCreationResponseS => Some("GameCreationResponseS"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SMsg {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SMsg {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SMsg {
    type Output = SMsg;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SMsg {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SMsg {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SMsg {}
pub struct SMsgUnionTableOffset {}

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GAME_REF: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GAME_REF: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GAME_REF: [GameRef; 3] = [
  GameRef::NONE,
  GameRef::Create,
  GameRef::Join,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GameRef(pub u8);
#[allow(non_upper_case_globals)]
impl GameRef {
  pub const NONE: Self = Self(0);
  pub const Create: Self = Self(1);
  pub const Join: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Create,
    Self::Join,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Create => Some("Create"),
      Self::Join => Some("Join"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GameRef {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for GameRef {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GameRef {
    type Output = GameRef;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GameRef {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GameRef {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GameRef {}
pub struct GameRefUnionTableOffset {}

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CMSG: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CMSG: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CMSG: [CMsg; 3] = [
  CMsg::NONE,
  CMsg::IdentifyC,
  CMsg::StartGameC,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct CMsg(pub u8);
#[allow(non_upper_case_globals)]
impl CMsg {
  pub const NONE: Self = Self(0);
  pub const IdentifyC: Self = Self(1);
  pub const StartGameC: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::IdentifyC,
    Self::StartGameC,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::IdentifyC => Some("IdentifyC"),
      Self::StartGameC => Some("StartGameC"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for CMsg {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for CMsg {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for CMsg {
    type Output = CMsg;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for CMsg {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for CMsg {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for CMsg {}
pub struct CMsgUnionTableOffset {}

pub enum ErrorSOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ErrorS<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ErrorS<'a> {
  type Inner = ErrorS<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ErrorS<'a> {
  pub const VT_ERROR: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ErrorS { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ErrorSArgs<'args>
  ) -> flatbuffers::WIPOffset<ErrorS<'bldr>> {
    let mut builder = ErrorSBuilder::new(_fbb);
    if let Some(x) = args.error { builder.add_error(x); }
    builder.finish()
  }


  #[inline]
  pub fn error(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ErrorS::VT_ERROR, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for ErrorS<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error", Self::VT_ERROR, true)?
     .finish();
    Ok(())
  }
}
pub struct ErrorSArgs<'a> {
    pub error: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ErrorSArgs<'a> {
  #[inline]
  fn default() -> Self {
    ErrorSArgs {
      error: None, // required field
    }
  }
}

pub struct ErrorSBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ErrorSBuilder<'a, 'b> {
  #[inline]
  pub fn add_error(&mut self, error: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ErrorS::VT_ERROR, error);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ErrorSBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ErrorSBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ErrorS<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ErrorS::VT_ERROR,"error");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ErrorS<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ErrorS");
      ds.field("error", &self.error());
      ds.finish()
  }
}
pub enum GameCreationResponseSOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GameCreationResponseS<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GameCreationResponseS<'a> {
  type Inner = GameCreationResponseS<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GameCreationResponseS<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GameCreationResponseS { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GameCreationResponseSArgs
  ) -> flatbuffers::WIPOffset<GameCreationResponseS<'bldr>> {
    let mut builder = GameCreationResponseSBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(GameCreationResponseS::VT_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GameCreationResponseS<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct GameCreationResponseSArgs {
    pub id: u32,
}
impl<'a> Default for GameCreationResponseSArgs {
  #[inline]
  fn default() -> Self {
    GameCreationResponseSArgs {
      id: 0,
    }
  }
}

pub struct GameCreationResponseSBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameCreationResponseSBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(GameCreationResponseS::VT_ID, id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameCreationResponseSBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameCreationResponseSBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GameCreationResponseS<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GameCreationResponseS<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GameCreationResponseS");
      ds.field("id", &self.id());
      ds.finish()
  }
}
pub enum SMsgTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SMsgTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SMsgTable<'a> {
  type Inner = SMsgTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SMsgTable<'a> {
  pub const VT_MSG_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_MSG: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SMsgTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SMsgTableArgs
  ) -> flatbuffers::WIPOffset<SMsgTable<'bldr>> {
    let mut builder = SMsgTableBuilder::new(_fbb);
    if let Some(x) = args.msg { builder.add_msg(x); }
    builder.add_msg_type(args.msg_type);
    builder.finish()
  }


  #[inline]
  pub fn msg_type(&self) -> SMsg {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SMsg>(SMsgTable::VT_MSG_TYPE, Some(SMsg::NONE)).unwrap()}
  }
  #[inline]
  pub fn msg(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(SMsgTable::VT_MSG, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_error_s(&self) -> Option<ErrorS<'a>> {
    if self.msg_type() == SMsg::ErrorS {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ErrorS::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_game_creation_response_s(&self) -> Option<GameCreationResponseS<'a>> {
    if self.msg_type() == SMsg::GameCreationResponseS {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { GameCreationResponseS::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for SMsgTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<SMsg, _>("msg_type", Self::VT_MSG_TYPE, "msg", Self::VT_MSG, false, |key, v, pos| {
        match key {
          SMsg::ErrorS => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ErrorS>>("SMsg::ErrorS", pos),
          SMsg::GameCreationResponseS => v.verify_union_variant::<flatbuffers::ForwardsUOffset<GameCreationResponseS>>("SMsg::GameCreationResponseS", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct SMsgTableArgs {
    pub msg_type: SMsg,
    pub msg: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for SMsgTableArgs {
  #[inline]
  fn default() -> Self {
    SMsgTableArgs {
      msg_type: SMsg::NONE,
      msg: None,
    }
  }
}

pub struct SMsgTableBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SMsgTableBuilder<'a, 'b> {
  #[inline]
  pub fn add_msg_type(&mut self, msg_type: SMsg) {
    self.fbb_.push_slot::<SMsg>(SMsgTable::VT_MSG_TYPE, msg_type, SMsg::NONE);
  }
  #[inline]
  pub fn add_msg(&mut self, msg: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SMsgTable::VT_MSG, msg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SMsgTableBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SMsgTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SMsgTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SMsgTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SMsgTable");
      ds.field("msg_type", &self.msg_type());
      match self.msg_type() {
        SMsg::ErrorS => {
          if let Some(x) = self.msg_as_error_s() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        SMsg::GameCreationResponseS => {
          if let Some(x) = self.msg_as_game_creation_response_s() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("msg", &x)
        },
      };
      ds.finish()
  }
}
pub enum CreateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Create<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Create<'a> {
  type Inner = Create<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Create<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Create { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args CreateArgs
  ) -> flatbuffers::WIPOffset<Create<'bldr>> {
    let mut builder = CreateBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for Create<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct CreateArgs {
}
impl<'a> Default for CreateArgs {
  #[inline]
  fn default() -> Self {
    CreateArgs {
    }
  }
}

pub struct CreateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CreateBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CreateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CreateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Create<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Create<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Create");
      ds.finish()
  }
}
pub enum JoinOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Join<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Join<'a> {
  type Inner = Join<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Join<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Join { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JoinArgs
  ) -> flatbuffers::WIPOffset<Join<'bldr>> {
    let mut builder = JoinBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Join::VT_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Join<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct JoinArgs {
    pub id: u32,
}
impl<'a> Default for JoinArgs {
  #[inline]
  fn default() -> Self {
    JoinArgs {
      id: 0,
    }
  }
}

pub struct JoinBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JoinBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(Join::VT_ID, id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JoinBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JoinBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Join<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Join<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Join");
      ds.field("id", &self.id());
      ds.finish()
  }
}
pub enum IdentifyCOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct IdentifyC<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IdentifyC<'a> {
  type Inner = IdentifyC<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IdentifyC<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_GAME_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_GAME: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IdentifyC { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args IdentifyCArgs<'args>
  ) -> flatbuffers::WIPOffset<IdentifyC<'bldr>> {
    let mut builder = IdentifyCBuilder::new(_fbb);
    if let Some(x) = args.game { builder.add_game(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_game_type(args.game_type);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IdentifyC::VT_NAME, None).unwrap()}
  }
  #[inline]
  pub fn game_type(&self) -> GameRef {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GameRef>(IdentifyC::VT_GAME_TYPE, Some(GameRef::NONE)).unwrap()}
  }
  #[inline]
  pub fn game(&self) -> flatbuffers::Table<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(IdentifyC::VT_GAME, None).unwrap()}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn game_as_create(&self) -> Option<Create<'a>> {
    if self.game_type() == GameRef::Create {
      let u = self.game();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Create::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn game_as_join(&self) -> Option<Join<'a>> {
    if self.game_type() == GameRef::Join {
      let u = self.game();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Join::init_from_table(u) })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for IdentifyC<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .visit_union::<GameRef, _>("game_type", Self::VT_GAME_TYPE, "game", Self::VT_GAME, true, |key, v, pos| {
        match key {
          GameRef::Create => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Create>>("GameRef::Create", pos),
          GameRef::Join => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Join>>("GameRef::Join", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct IdentifyCArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub game_type: GameRef,
    pub game: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for IdentifyCArgs<'a> {
  #[inline]
  fn default() -> Self {
    IdentifyCArgs {
      name: None, // required field
      game_type: GameRef::NONE,
      game: None, // required field
    }
  }
}

pub struct IdentifyCBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> IdentifyCBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IdentifyC::VT_NAME, name);
  }
  #[inline]
  pub fn add_game_type(&mut self, game_type: GameRef) {
    self.fbb_.push_slot::<GameRef>(IdentifyC::VT_GAME_TYPE, game_type, GameRef::NONE);
  }
  #[inline]
  pub fn add_game(&mut self, game: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IdentifyC::VT_GAME, game);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> IdentifyCBuilder<'a, 'b> {
    let start = _fbb.start_table();
    IdentifyCBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IdentifyC<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, IdentifyC::VT_NAME,"name");
    self.fbb_.required(o, IdentifyC::VT_GAME,"game");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IdentifyC<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IdentifyC");
      ds.field("name", &self.name());
      ds.field("game_type", &self.game_type());
      match self.game_type() {
        GameRef::Create => {
          if let Some(x) = self.game_as_create() {
            ds.field("game", &x)
          } else {
            ds.field("game", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GameRef::Join => {
          if let Some(x) = self.game_as_join() {
            ds.field("game", &x)
          } else {
            ds.field("game", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("game", &x)
        },
      };
      ds.finish()
  }
}
pub enum StartGameCOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StartGameC<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StartGameC<'a> {
  type Inner = StartGameC<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StartGameC<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StartGameC { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args StartGameCArgs
  ) -> flatbuffers::WIPOffset<StartGameC<'bldr>> {
    let mut builder = StartGameCBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for StartGameC<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct StartGameCArgs {
}
impl<'a> Default for StartGameCArgs {
  #[inline]
  fn default() -> Self {
    StartGameCArgs {
    }
  }
}

pub struct StartGameCBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StartGameCBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StartGameCBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StartGameCBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StartGameC<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StartGameC<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StartGameC");
      ds.finish()
  }
}
pub enum CMsgTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CMsgTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CMsgTable<'a> {
  type Inner = CMsgTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CMsgTable<'a> {
  pub const VT_MSG_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_MSG: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CMsgTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args CMsgTableArgs
  ) -> flatbuffers::WIPOffset<CMsgTable<'bldr>> {
    let mut builder = CMsgTableBuilder::new(_fbb);
    if let Some(x) = args.msg { builder.add_msg(x); }
    builder.add_msg_type(args.msg_type);
    builder.finish()
  }


  #[inline]
  pub fn msg_type(&self) -> CMsg {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CMsg>(CMsgTable::VT_MSG_TYPE, Some(CMsg::NONE)).unwrap()}
  }
  #[inline]
  pub fn msg(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(CMsgTable::VT_MSG, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_identify_c(&self) -> Option<IdentifyC<'a>> {
    if self.msg_type() == CMsg::IdentifyC {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { IdentifyC::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_start_game_c(&self) -> Option<StartGameC<'a>> {
    if self.msg_type() == CMsg::StartGameC {
      self.msg().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { StartGameC::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for CMsgTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<CMsg, _>("msg_type", Self::VT_MSG_TYPE, "msg", Self::VT_MSG, false, |key, v, pos| {
        match key {
          CMsg::IdentifyC => v.verify_union_variant::<flatbuffers::ForwardsUOffset<IdentifyC>>("CMsg::IdentifyC", pos),
          CMsg::StartGameC => v.verify_union_variant::<flatbuffers::ForwardsUOffset<StartGameC>>("CMsg::StartGameC", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct CMsgTableArgs {
    pub msg_type: CMsg,
    pub msg: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for CMsgTableArgs {
  #[inline]
  fn default() -> Self {
    CMsgTableArgs {
      msg_type: CMsg::NONE,
      msg: None,
    }
  }
}

pub struct CMsgTableBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CMsgTableBuilder<'a, 'b> {
  #[inline]
  pub fn add_msg_type(&mut self, msg_type: CMsg) {
    self.fbb_.push_slot::<CMsg>(CMsgTable::VT_MSG_TYPE, msg_type, CMsg::NONE);
  }
  #[inline]
  pub fn add_msg(&mut self, msg: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CMsgTable::VT_MSG, msg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CMsgTableBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CMsgTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CMsgTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CMsgTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CMsgTable");
      ds.field("msg_type", &self.msg_type());
      match self.msg_type() {
        CMsg::IdentifyC => {
          if let Some(x) = self.msg_as_identify_c() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        CMsg::StartGameC => {
          if let Some(x) = self.msg_as_start_game_c() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("msg", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CMsgTable`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cmsg_table_unchecked`.
pub fn root_as_cmsg_table(buf: &[u8]) -> Result<CMsgTable, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CMsgTable>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CMsgTable` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_cmsg_table_unchecked`.
pub fn size_prefixed_root_as_cmsg_table(buf: &[u8]) -> Result<CMsgTable, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CMsgTable>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CMsgTable` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cmsg_table_unchecked`.
pub fn root_as_cmsg_table_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CMsgTable<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CMsgTable<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CMsgTable` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cmsg_table_unchecked`.
pub fn size_prefixed_root_as_cmsg_table_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CMsgTable<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CMsgTable<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CMsgTable and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CMsgTable`.
pub unsafe fn root_as_cmsg_table_unchecked(buf: &[u8]) -> CMsgTable {
  flatbuffers::root_unchecked::<CMsgTable>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CMsgTable and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CMsgTable`.
pub unsafe fn size_prefixed_root_as_cmsg_table_unchecked(buf: &[u8]) -> CMsgTable {
  flatbuffers::size_prefixed_root_unchecked::<CMsgTable>(buf)
}
#[inline]
pub fn finish_cmsg_table_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<CMsgTable<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_cmsg_table_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<CMsgTable<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod GoFish

